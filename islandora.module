<?php

/**
 * @file
 * Contains islandora.module.
 *
 * This file is part of the Islandora Project.
 *
 * (c) Islandora Foundation
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author Diego Pino Navarro <dpino@metro.org> https://github.com/diegopino
 */

use Drupal\Core\Database\IntegrityConstraintViolationException;
use Drupal\Core\Entity\EntityInterface;
use Drupal\media_entity\MediaInterface;
use Drupal\node\NodeInterface;
use Drupal\file\FileInterface;
use Drupal\islandora\ContextProvider\NodeContextProvider;
use Drupal\islandora\ContextProvider\MediaContextProvider;
use Drupal\islandora\ContextProvider\FileContextProvider;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function islandora_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the islandora module.
    case 'help.page.islandora':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Islandora integrates Drupal with a Fedora repository.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_modules_installed().
 */
function islandora_modules_installed($modules) {
  // Ensure the auth and serialization formats we need are available.
  if (in_array('rest', $modules)) {
    $rest_resource_config_storage = \Drupal::service('entity_type.manager')->getStorage('rest_resource_config');
    $rest_resource_config = $rest_resource_config_storage->load('entity.node');

    if ($rest_resource_config) {
      $configuration = $rest_resource_config->get('configuration');

      if (!in_array('jsonld', $configuration['formats'])) {
        $configuration['formats'][] = 'jsonld';
      }

      if (!in_array('jwt_auth', $configuration['authentication'])) {
        $configuration['authentication'][] = 'jwt_auth';
      }

      $rest_resource_config->set('configuration', $configuration);
      $rest_resource_config->save(TRUE);
    }
  }
}

/**
 * Implements hook_rdf_namespaces().
 */
function islandora_rdf_namespaces() {
  // Yes, it's amazing, rdf is not registered by default!
  return [
    'ldp'  => 'http://www.w3.org/ns/ldp#',
    'dc11' => 'http://purl.org/dc/elements/1.1/',
    'nfo' => 'http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.1/',
    'ebucore' => 'http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#',
    'fedora' => 'http://fedora.info/definitions/v4/repository#',
    'owl' => 'http://www.w3.org/2002/07/owl#',
    'ore' => 'http://www.openarchives.org/ore/terms/',
    'rdf' => 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'islandora' => 'http://islandora.ca/CLAW/',
    'pcdm' => 'http://pcdm.org/models#',
    'use' => 'http://pcdm.org/use#',
    'iana' => 'http://www.iana.org/assignments/relation/',
  ];
}

/**
function islandora_node_insert(NodeInterface $node) {
  _node_index($node);
}

function islandora_node_update(NodeInterface $node) {
  dsm("IN NODE UPDATE");
  _node_index($node);
}

function _node_index(NodeInterface $node) {
  $provider = new NodeContextProvider($node);
  $provided = $provider->getRuntimeContexts([]);

  $context_manager = \Drupal::service('context.manager');
  $context_manager->evaluateContexts($provided);

  foreach ($context_manager->getActiveReactions('index') as $reaction) {
    $reaction->execute($node);
  }
}

function islandora_media_insert(MediaInterface $media) {
  _media_index($media);
}

function islandora_media_update(MediaInterface $media) {
  dsm("IN MEDIA UPDATE");
  _media_index($media);
}

function _media_index(MediaInterface $media) {
  // Create a context for the media.
  $provider = new MediaContextProvider($media);
  $provided = $provider->getRuntimeContexts([]);

  $nids = _get_referencing_nodes($media);

  _execute_context_reactions('index', $nids, $media, $provided);
}

// I AM TRYING TO FIGURE OUT WHERE THE QUERY EXCEPTION IS COMING FROM
function _get_referencing_nodes(MediaInterface $media) {
  // Get all node fields that are entity references to Media.
  $fields = \Drupal::entityQuery('field_storage_config')
    ->condition('entity_type', 'node')
    ->condition('type', 'entity_reference')
    ->condition('settings.target_type', 'media')
    ->execute();

  // Process field names, stripping off 'node.' and appending 'target_id'
  $conditions = array_map(
    function($field) { return ltrim($field, 'node.') . '.target_id'; },
    $fields
  ); 

  if (empty($conditions)) {
    return [];
  }

  // I'm RIGHT HERE
  // Get all nodes that reference this media.
  $query = \Drupal::entityQuery('node', 'OR');
  foreach ($conditions as $condition) {
    $query->condition($condition, $media->id());
  }

  return $query->execute();
}

function _execute_context_reactions($reaction_type, $nids, $entity, array $provided) {
  $context_manager = \Drupal::service('context.manager');
  // If there are no referencing nodes, just fire the reactions with the Media in context.
  if (empty($nids)) {
    $context_manager->evaluateContexts($provided);
    foreach ($context_manager->getActiveReactions($reaction_type) as $reaction) {
      $reaction->execute($entity);
    }
  }
  // Otherwise, fire reactions per node / media combo.
  else {
    dsm($nids);
    foreach ($nids as $nid) {
      $node = \Drupal\node\Entity\Node::load($nid);
      if (!$node) {
        continue;
      }
      $provider = new NodeContextProvider($node);
      $context_manager->evaluateContexts($provided + $provider->getRuntimeContexts([]));
      foreach ($context_manager->getActiveReactions($reaction_type) as $reaction) {
        $reaction->execute($entity);
      }
    }
  }
}

function _file_index(FileInterface $file) {
  $provider = new FileContextProvider($file);
  $provided = $provider->getRuntimeContexts([]);

  $references = file_get_file_references($file, NULL, \Drupal\Core\Entity\EntityStorageInterface::FIELD_LOAD_CURRENT, NULL);

  // Ignore Drupal thumbnails.
  unset($references['thumbnail']);

  foreach ($references as $field => $reference) {
    foreach ($reference['media'] as $media) {
      $provider = new MediaContextProvider($media);
      _execute_context_reactions(
        'index',
        _get_referencing_nodes($media),
        $media,
        $provider->getRuntimeContexts([]) + $provided
      );
    }
  }
}

function islandora_file_insert(FileInterface $file) {
  _file_index($file);
}

function islandora_file_update(FileInterface $file) {
  _file_index($file);
}
*/

/**
 * Implements hook_entity_insert().
 */
function islandora_entity_insert(EntityInterface $entity) {
  switch ($entity->getEntityType()->id()) {
    case "node":
      $provider = new NodeContextProvider($entity);
      break;
    case "media":
      $provider = new MediaContextProvider($entity);
      break;
    case "file":
      $provider = new FileContextProvider($entity);
      break;
    default:
      $provider = NULL;
      break;
  }

  if ($provider) {
    $context_manager = \Drupal::service('context.manager');
    $provided = $provider->getRuntimeContexts([]);
    $context_manager->evaluateContexts($provided);

    foreach ($context_manager->getActiveReactions('index') as $reaction) {
      $reaction->execute($entity);
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function islandora_entity_update(EntityInterface $entity) {
  switch ($entity->getEntityType()->id()) {
    case "node":
      $provider = new NodeContextProvider($entity);
      break;
    case "media":
      $provider = new MediaContextProvider($entity);
      break;
    case "file":
      $provider = new FileContextProvider($entity);
      break;
    default:
      $provider = NULL;
      break;
  }

  if ($provider) {
    $context_manager = \Drupal::service('context.manager');
    $provided = $provider->getRuntimeContexts([]);
    $context_manager->evaluateContexts($provided);

    foreach ($context_manager->getActiveReactions('index') as $reaction) {
      $reaction->execute($entity);
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function islandora_entity_delete(EntityInterface $entity) {
  switch ($entity->getEntityType()->id()) {
    case "node":
      $provider = new NodeContextProvider($entity);
      break;
    case "media":
      $provider = new MediaContextProvider($entity);
      break;
    case "file":
      $provider = new FileContextProvider($entity);
      break;
    default:
      $provider = NULL;
      break;
  }

  if ($provider) {
    $context_manager = \Drupal::service('context.manager');
    $provided = $provider->getRuntimeContexts([]);
    $context_manager->evaluateContexts($provided);

    foreach ($context_manager->getActiveReactions('deindex') as $reaction) {
      $reaction->execute($entity);
    }
  }
}

/**
 * Implements hook_node_view_alter().
 */
function islandora_node_view_alter(&$build, EntityInterface $entity) {
  // Return if memberof field does not exist.
  if ($entity->hasField('field_memberof') == FALSE) {
    return;
  }

  // Return if memberof field has no values.
  $collection_members = $entity->get('field_memberof')->getValue();
  if (count($collection_members) == 0) {
    return;
  }

  // Loop through each member and add to the collection_links.
  $collection_links = [];
  foreach ($collection_members as $member_info) {
    $collection_id = $member_info['target_id'];
    $collection_entity = $entity->load($collection_id);

    // If collection entity does not exist, skip.
    if ($collection_entity == NULL) {
      continue;
    }

    // If entity bundle type is not Collection, skip.
    $collection_entity_bundle = $collection_entity->bundle();
    if ($collection_entity_bundle != "islandora_collection") {
      continue;
    }

    $collection_entity_url = $collection_entity->url('canonical', ['absolute' => TRUE]);
    array_push($collection_links, "<" . $collection_entity_url . ">; rel='collection'");
  }

  if (count($collection_links) > 0) {
    $collection_links_str = implode(", ", $collection_links);
    $build['#attached']['http_header'] = [
      ['Link', $collection_links_str],
    ];
  }
}
